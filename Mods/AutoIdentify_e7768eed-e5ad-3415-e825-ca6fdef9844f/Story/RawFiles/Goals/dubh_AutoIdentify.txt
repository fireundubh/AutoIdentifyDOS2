Version 1
SubGoalCombiner SGC_AND
INITSECTION

KBSECTION
//REGION When a container is opening, flag and identify items.
IF
ItemTemplateOpening(_Template, _Item, _Char)
AND
ItemIsContainer(_Item, 1)
AND
CharacterIsPlayer(_Char, 1)
AND
IsTagged(_Item, "FIRE_LORE_Identified", 0)
AND
ContainerGetGoldValue(_Item, _GoldValue)
AND
_GoldValue > 1
AND
FIRE_LORE_PartyHasHighEnoughLoremaster(_Char, 5)
THEN
FIRE_LORE_Identify(_Char, _Item, 1);
//END_REGION

//REGION When an item is added to a character, flag and identify item.
IF
ItemAddedToCharacter(_Item, _Char)
AND
IsTagged(_Item, "FIRE_LORE_Identified", 0)
AND
DB_IsPlayer(_Char)
AND
FIRE_LORE_PartyHasHighEnoughLoremaster(_Char, 5)
THEN
FIRE_LORE_Identify(_Char, _Item, 0);
//END_REGION

//REGION Procedures
PROC
FIRE_LORE_Identify((CHARACTERGUID)_Char, (ITEMGUID)_Item, 1)
THEN
SetTag(_Item, "FIRE_LORE_Identified");
DebugBreak("[FIRE:LORE:Identify] Identifying container.");
ContainerIdentifyAll(_Item);
InventoryLaunchIterator(_Item, "FIRE_LORE_FlagAndIdentify", "");

/*
PROC
FIRE_LORE_Identify((CHARACTERGUID)_Char, (ITEMGUID)_Item, 0)
AND
ItemGetGoldValue(_Item, _Value)
AND
IntegertoString(_Value, _ValStr)
AND
String(_Item, _ItemStr)
AND
StringConcatenate("[FIRE:LORE:Identify] Item [", _ItemStr, _Str1)
AND
StringConcatenate(_Str1, "] gold value is [", _Str2)
AND
StringConcatenate(_Str2, _ValStr, _Str3)
AND
StringConcatenate(_Str3, "]", _Msg)
THEN
DebugBreak(_Msg);
*/

PROC
FIRE_LORE_Identify((CHARACTERGUID)_Char, (ITEMGUID)_Item, 0)
THEN
SetTag(_Item, "FIRE_LORE_Identified");
CharacterItemSetEvent(_Char, _Item, "FIRE_LORE_CheckRarity");

//Fires if the item's rarity isn't "Common" or "Unique"
IF
CharacterItemEvent(_Char, _Item, "FIRE_LORE_IdentifyItem")
THEN
DebugBreak("[FIRE:LORE:Identify] Identifying item via proxy container.");
FIRE_LORE_AddToIdentifyContainer(_Char, _Item);

PROC
FIRE_LORE_AddToIdentifyContainer((CHARACTERGUID)_Char, (ITEMGUID)_Item)
AND
NOT DB_FIRE_LORE_Temp_IdentifyHolder(_Char, _)
AND
GetPosition(_Char, _x, _y, _z)
AND
CreateItemTemplateAtPosition("CONT_Humans_Backpack_Merchant_A_360e3e11-c7f8-4281-848a-596e37df884b", _x, _y, _z, _Backpack)
THEN
DebugBreak("[FIRE:LORE:Identify] Created proxy identify container.");
SetVisible(_Backpack, 0);
ItemSetCanInteract(_Backpack, 0);
DB_FIRE_LORE_Temp_IdentifyHolder(_Char, _Backpack);
ItemSetOwner(_Backpack, _Char);
ProcObjectTimer(_Backpack, "FIRE_Timers_IdentifyContainer", 250);

PROC
FIRE_LORE_AddToIdentifyContainer((CHARACTERGUID)_Char, (ITEMGUID)_Item)
AND
DB_FIRE_LORE_Temp_IdentifyHolder(_Char, _Backpack)
THEN
ItemToInventory(_Item, _Backpack);

PROC
ProcObjectTimerFinished((ITEMGUID)_Backpack, "FIRE_Timers_IdentifyContainer")
AND
DB_FIRE_LORE_Temp_IdentifyHolder(_Char, _Backpack)
THEN
NOT DB_FIRE_LORE_Temp_IdentifyHolder(_Char, _Backpack);
ContainerIdentifyAll(_Backpack);
MoveAllItemsTo(_Backpack, _Char, 0, 0, 0);
ProcObjectTimer(_Backpack, "FIRE_Timers_RemovedIdentifyContainer", 250);

PROC
ProcObjectTimerFinished((ITEMGUID)_Backpack, "FIRE_Timers_RemovedIdentifyContainer")
THEN
ItemRemove(_Backpack);
//END_REGION

//REGION Events
IF
StoryEvent((ITEMGUID)_Item, "FIRE_LORE_FlagAndIdentify")
THEN
SetTag(_Item, "FIRE_LORE_Identified");

IF
StoryEvent((ITEMGUID)_Item, "FIRE_LORE_FlagAndIdentify")
AND
ItemIsContainer(_Item, 1)
AND
GetInventoryOwner(_Item, (CHARACTERGUID)_Owner)
THEN
FIRE_LORE_Identify(_Owner, _Item, 1);
//END_REGION

//REGION Queries
QRY
FIRE_LORE_PartyHasHighEnoughLoremaster((CHARACTERGUID)_PartyMember, (INTEGER)_MinLoremaster)
AND
CharacterGetAbility(_PartyMember, "Loremaster", _Value)
AND
_Value >= _MinLoremaster
THEN
DB_FIRE_LORE_LoremasterSuccess(_PartyMember);

QRY
FIRE_LORE_PartyHasHighEnoughLoremaster((CHARACTERGUID)_PartyMember, (INTEGER)_MinLoremaster)
AND
NOT DB_FIRE_LORE_LoremasterSuccess(_PartyMember)
AND
DB_IsPlayer(_Player)
AND
CharacterIsInPartyWith(_PartyMember, _Player, 1)
AND
CharacterGetAbility(_Player, "Loremaster", _Value)
AND
_Value >= _MinLoremaster
THEN
DB_FIRE_LORE_LoremasterSuccess(_PartyMember);

QRY
FIRE_LORE_PartyHasHighEnoughLoremaster((CHARACTERGUID)_PartyMember, (INTEGER)_MinLoremaster)
AND
DB_FIRE_LORE_LoremasterSuccess(_PartyMember)
THEN
NOT DB_FIRE_LORE_LoremasterSuccess(_PartyMember);
//END_REGION

//REGION Updates_FlagToTag
//New saves
IF
GameEventSet("GAMEEVENT_GameStarted")
AND
DB_StoryStarted(1)
THEN
DebugBreak("[FIRE:LORE] Setting flag [FIRE_LORE_Update_FlagToTag_Finished] for a new save.");
GlobalSetFlag("FIRE_LORE_Update_FlagToTag_Finished");

IF
SavegameLoaded(_,_,_,_)
AND
GlobalGetFlag("FIRE_LORE_Update_FlagToTag_Finished", 0)
THEN
DebugBreak("[FIRE:LORE:Updater] Updating [FIRE_LORE_Identified] flagged items to tag.");
TimerLaunch("FIRE_LORE_Update_FlagToTag", 250);

IF
TimerFinished("FIRE_LORE_Update_FlagToTag")
AND
DB_IsPlayer(_Char)
THEN
//The iterator events are handled in the main script, since this script is temporarily active.
InventoryLaunchIterator(_Char, "FIRE_Lore_SetIdentifyFlagToTag", "");

IF
TimerFinished("FIRE_LORE_Update_FlagToTag")
THEN
GlobalSetFlag("FIRE_LORE_Update_FlagToTag_Finished");

IF
StoryEvent((ITEMGUID)_Item, "FIRE_Lore_SetIdentifyFlagToTag")
AND
ObjectGetFlag(_Item, "FIRE_LORE_Identified", 1)
THEN
SetTag(_Item, "FIRE_LORE_Identified");

//Items inside containers
IF
StoryEvent((ITEMGUID)_Item, "FIRE_Lore_SetIdentifyFlagToTag")
AND
IsTagged(_Item, "FIRE_LORE_Identified", 1)
AND
ItemIsContainer(_Item, 1)
THEN
InventoryLaunchIterator(_Item, "FIRE_Lore_SetIdentifyFlagToTag", "");
//END_REGION

//REGION Debug
IF
GameModeStarted(_, 1)
AND
NOT DB_Origins(_)
THEN
DB_Origins((CHARACTERGUID)S_GLO_CharacterCreationDummy_001_da072fe7-fdd5-42ae-9139-8bd4b9fca406);

IF
TextEventSet("fire_lore_spawntreasure")
AND
CharacterGetHostCharacter(_Char)
THEN
CharacterGiveReward(_Char, "CheatShieldsAllRarities", 0);

IF
TextEventSet("fire_lore_maxlore")
AND
CharacterGetHostCharacter(_Char)
THEN
CharacterAddAbility(_Char, "Loremaster", 5);
//END_REGION
EXITSECTION

ENDEXITSECTION
ParentTargetEdge "__Start"